class User < ApplicationRecord
    has_secure_password

    validates :username, uniqueness: true
    has_many :characters, dependent: :destroy

    # generate a salted + hashed password and save it to password_digest
    def password=(new_password)
    salt = BCrypt::Engine::generate_salt
    # => $2a$12$UW5etUc/o1YL4sSdeTBPku
    self.password_digest = BCrypt::Engine::hash_secret(new_password, salt)
    # => $2a$12$UW5etUc/o1YL4sSdeTBPkueUWwNIPNdQNAwzuSGkS3L5coBKMMZHm"
    end

    # check the plaintext password against the salted + hashed password
    def authenticate(password)
    # Salts generated by generate_salt are always 29 chars long.
    salt = password_digest[0..28]
    # compare the saved password_digest against the plaintext password by running the plaintext password through the same hashing function
    return nil unless BCrypt::Engine::hash_secret(password, salt) == self.password_digest
    self
    end

    def self.give_admin_access(admin, user)
        if (admin.admin)
            user.update(admin: true)
            true
        else
            false
        end
    end
end
